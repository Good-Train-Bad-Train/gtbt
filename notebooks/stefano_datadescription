{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "494cd7ee-fadd-4d02-b2c4-78ec2ccd0697",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a2714b2d-b5d3-44df-9a75-d78ac1f5bea2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df0 = pd.read_csv('raw_data/select_2020.csv',encoding='iso-8859-2',sep=';')\n",
    "df1 = pd.read_csv('raw_data/select_2021.csv',encoding='iso-8859-2',sep=';')\n",
    "df2 = pd.read_csv('raw_data/select_2022.csv',encoding='iso-8859-2',sep=';')\n",
    "df = pd.concat([df0,df1,df2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d670e2f4-e486-41a5-bc42-c6e91bfb6072",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['zugnr', 'datum', 'bhf', 'arrTime', 'adelay', 'depTime', 'ddelay'], dtype='object')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "450c8fdc-998e-4a92-99fb-6ea147df7a5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "listtoexclude = [] \n",
    "listtoexclude.append(list(df[df['adelay'] == -1].index))\n",
    "listtoexclude.append(list(df[df['ddelay'] == -1].index))\n",
    "listtoexclude = np.concatenate(listtoexclude)\n",
    "\n",
    "df = df.drop(listtoexclude)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6cbb2fb6-036c-4a63-909a-fdadc8d699b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "zugnr     datum       bhf                arrTime  adelay  depTime  ddelay\n",
       "EC 6      2019-12-15  Basel Bad Bf       1433     0       1434     0         1\n",
       "                      Basel SBB          9999     0       1426     0         1\n",
       "          2021-10-27  Karlsruhe Hbf      1612     0       1614     0         1\n",
       "                      Osnabrück Hbf      2121     6       2123     5         1\n",
       "                      Münster(Westf)Hbf  2055     0       2057     0         1\n",
       "                                                                            ..\n",
       "ice 1621  2022-04-30  Dortmund Hbf       9999     0       627      0         1\n",
       "ice 206   2022-04-28  Basel Bad Bf       512      1       521      0         1\n",
       "ice 726   2021-12-08  Würzburg Hbf       952      28      955      27        1\n",
       "ice 727   2021-06-12  München Hbf        2213     6       9999     0         1\n",
       "ice 928   2021-06-03  Köln Hbf           1405     0       1409     0         1\n",
       "Length: 1175317, dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(by=['zugnr']).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe47f4b8-01e4-4e6e-b4cc-a231bda9af04",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1f6b5fe8-395f-477a-8aa2-2a0235b5e77e",
   "metadata": {},
   "outputs": [],
   "source": [
    "delays = df.groupby('zugnr')['ddelay'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "58f5513e-f4ac-43b5-b9f2-3aa23d77ac7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='ddelay', ylabel='Count'>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(delays)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "446f3924-afaf-4429-ba2c-bcc47477f418",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
